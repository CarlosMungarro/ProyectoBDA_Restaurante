package GUI;

import Control.*;
import DTO.*;
import Entidades.Config;
import Entidades.Pedido;
import Entidades.Usuario;
import Persistencia.PersistenciaException;
import com.mongodb.client.MongoClient;
import com.mongodb.client.MongoClients;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import org.bson.Document;
import org.bson.types.ObjectId;

/**
 *
 * @author Carlo
 */
public class Sistema extends javax.swing.JFrame {

    // ---VARIABLES--- //
    private PedidoBO pedidoBO;
    private ConfigBO configBO;
    private UsuarioBO usuarioBO;
    private SalaBO salaBO;
    private PlatoBO platoBO;

    private MongoDatabase database;

    private EventosDTO eventoDto = new EventosDTO();
    private DefaultTableModel modelo = new DefaultTableModel();
    private DefaultTableModel tmp = new DefaultTableModel();
    private Convertir convertir = new Convertir();

    private int item;
    private double Totalpagar = 0.00;

    private Date fechaActual = new Date();
    private String fechaFormato = new SimpleDateFormat("yyyy-MM-dd").format(fechaActual);

    public Sistema(UsuarioDTO priv) throws PersistenciaException {
        initComponents();
        setLayout(new BorderLayout());

        pedidoBO = PedidoBO.getInstance();
        configBO = ConfigBO.getInstance();
        usuarioBO = UsuarioBO.getInstance(database);
        salaBO = SalaBO.getInstance();
        platoBO = PlatoBO.getInstance();

        txtIdHistorialPedido.setVisible(true);
        txtIdConfig.setVisible(true);
        if (priv.getRol().equals("Asistente")) {
            btnPlatos.setVisible(false);
            btnSala.setVisible(false);
            btnConfig.setVisible(false);
            btnUsuarios.setVisible(false);
            LabelVendedor.setText(priv.getNombre());
        } else {
            LabelVendedor.setText(priv.getNombre());
        }
        txtIdConfig.setVisible(false);
        txtIdHistorialPedido.setVisible(false);
        txtIdPedido.setVisible(false);
        txtNombrePlatoOriginal.setVisible(false);
        txtNombreSalaOriginal.setVisible(false);
        txtTempIdSala.setVisible(false);
        txtTempNumMesa.setVisible(false);
        jTabbedPane1.setEnabled(false);
        jTabbedPane1.setTabLayoutPolicy(JTabbedPane.WRAP_TAB_LAYOUT);
        jTabbedPane1.setBorder(null);

        panelSalas();
    }

    public void setDatabase(MongoDatabase database) {
        this.database = database;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        btnPlatos = new javax.swing.JButton();
        btnSala = new javax.swing.JButton();
        btnPedidos = new javax.swing.JButton();
        btnConfig = new javax.swing.JButton();
        btnUsuarios = new javax.swing.JButton();
        LabelVendedor = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        PanelSalas = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnGuardarSala = new javax.swing.JButton();
        btnEditarSala = new javax.swing.JButton();
        btnEliminarSala = new javax.swing.JButton();
        txtNombreSalaOriginal = new javax.swing.JTextField();
        txtMesas = new javax.swing.JTextField();
        txtNombreSala = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableSala = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        PanelMesas = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        txtBuscarPlato = new javax.swing.JTextField();
        btnAddPlato = new javax.swing.JButton();
        jScrollPane14 = new javax.swing.JScrollPane();
        tblTemPlatos = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        tableMenu = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtComentario = new javax.swing.JTextPane();
        btnAgregarComentario = new javax.swing.JButton();
        btnEliminarTempPlato = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        totalMenu = new javax.swing.JLabel();
        btnGenerarPedido = new javax.swing.JButton();
        txtTempIdSala = new javax.swing.JTextField();
        txtTempNumMesa = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        totalFinalizar = new javax.swing.JLabel();
        btnPdfPedido = new javax.swing.JButton();
        btnFinalizar = new javax.swing.JButton();
        txtIdPedido = new javax.swing.JTextField();
        txtIdHistorialPedido = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtNumMesaFinalizar = new javax.swing.JTextField();
        txtSalaFinalizar = new javax.swing.JTextField();
        jScrollPane13 = new javax.swing.JScrollPane();
        tableFinalizar = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane12 = new javax.swing.JScrollPane();
        TablePedidos = new javax.swing.JTable();
        jPanel11 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        txtIdConfig = new javax.swing.JTextField();
        btnActualizarConfig = new javax.swing.JButton();
        txtRucConfig = new javax.swing.JTextField();
        txtTelefonoConfig = new javax.swing.JTextField();
        txtNombreConfig = new javax.swing.JTextField();
        txtDireccionConfig = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        txtMensaje = new javax.swing.JTextField();
        jPanel21 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        btnRegistrarUsuario = new javax.swing.JButton();
        txtIdSala1 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        cbxRol = new javax.swing.JComboBox<>();
        txtPass = new javax.swing.JPasswordField();
        jScrollPane10 = new javax.swing.JScrollPane();
        TableUsuarios = new javax.swing.JTable();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnGuardarPlatos = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        txtNombrePlatoOriginal = new javax.swing.JTextField();
        txtNombrePlato = new javax.swing.JTextField();
        txtPrecioPlato = new javax.swing.JTextField();
        jScrollPane9 = new javax.swing.JScrollPane();
        TablePlatos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 51, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("RESTAURANTE CHALET");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(298, 298, 298)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jLabel1)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(153, 153, 153));

        btnPlatos.setBackground(new java.awt.Color(0, 51, 204));
        btnPlatos.setForeground(new java.awt.Color(255, 255, 255));
        btnPlatos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/platos.png"))); // NOI18N
        btnPlatos.setText("PLATOS Y BEBIDAS");
        btnPlatos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPlatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlatosActionPerformed(evt);
            }
        });

        btnSala.setBackground(new java.awt.Color(0, 51, 204));
        btnSala.setForeground(new java.awt.Color(255, 255, 255));
        btnSala.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sala.png"))); // NOI18N
        btnSala.setText("SALAS");
        btnSala.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalaActionPerformed(evt);
            }
        });

        btnPedidos.setBackground(new java.awt.Color(0, 51, 204));
        btnPedidos.setForeground(new java.awt.Color(255, 255, 255));
        btnPedidos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pedidos.png"))); // NOI18N
        btnPedidos.setText("PEDIDOS");
        btnPedidos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPedidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPedidosActionPerformed(evt);
            }
        });

        btnConfig.setBackground(new java.awt.Color(0, 51, 204));
        btnConfig.setForeground(new java.awt.Color(255, 255, 255));
        btnConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/config.png"))); // NOI18N
        btnConfig.setText("CONFIG");
        btnConfig.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfigActionPerformed(evt);
            }
        });

        btnUsuarios.setBackground(new java.awt.Color(0, 51, 204));
        btnUsuarios.setForeground(new java.awt.Color(255, 255, 255));
        btnUsuarios.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/usuarios.png"))); // NOI18N
        btnUsuarios.setText("USUARIOS");
        btnUsuarios.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUsuarios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUsuariosActionPerformed(evt);
            }
        });

        LabelVendedor.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        LabelVendedor.setForeground(new java.awt.Color(0, 0, 0));
        LabelVendedor.setText("Administrador");

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/logo.png"))); // NOI18N
        jButton1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnUsuarios, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPlatos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSala, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnPedidos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelVendedor)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(LabelVendedor)
                .addGap(59, 59, 59)
                .addComponent(btnPlatos, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSala, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnPedidos, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.setForeground(new java.awt.Color(102, 102, 102));
        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.RIGHT);
        jTabbedPane1.setToolTipText("");
        jTabbedPane1.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        jTabbedPane1.setEnabled(false);
        jTabbedPane1.setFocusable(false);

        jPanel4.setBackground(new java.awt.Color(204, 204, 204));

        PanelSalas.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane1.setViewportView(PanelSalas);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1030, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 550, Short.MAX_VALUE)
        );

        jTabbedPane1.addTab("", jPanel4);

        jPanel6.setBackground(new java.awt.Color(204, 204, 204));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel17.setBackground(new java.awt.Color(204, 204, 204));
        jPanel17.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel18.setBackground(new java.awt.Color(0, 51, 204));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("NUEVA SALA");

        javax.swing.GroupLayout jPanel18Layout = new javax.swing.GroupLayout(jPanel18);
        jPanel18.setLayout(jPanel18Layout);
        jPanel18Layout.setHorizontalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel18Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
        );
        jPanel18Layout.setVerticalGroup(
            jPanel18Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel18Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel7)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jLabel8.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 0));
        jLabel8.setText("NOMBRE:");

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("MESAS:");

        btnGuardarSala.setBackground(new java.awt.Color(0, 51, 204));
        btnGuardarSala.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnGuardarSala.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardarSala.setText("GUARDAR");
        btnGuardarSala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarSalaActionPerformed(evt);
            }
        });

        btnEditarSala.setBackground(new java.awt.Color(153, 153, 153));
        btnEditarSala.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEditarSala.setForeground(new java.awt.Color(255, 255, 255));
        btnEditarSala.setText("EDITAR");
        btnEditarSala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarSalaActionPerformed(evt);
            }
        });

        btnEliminarSala.setBackground(new java.awt.Color(204, 51, 0));
        btnEliminarSala.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEliminarSala.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminarSala.setText("ELIMINAR");
        btnEliminarSala.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarSalaActionPerformed(evt);
            }
        });

        txtNombreSalaOriginal.setBackground(new java.awt.Color(204, 204, 204));
        txtNombreSalaOriginal.setBorder(null);
        txtNombreSalaOriginal.setOpaque(true);

        txtMesas.setBackground(new java.awt.Color(153, 153, 153));
        txtMesas.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtMesas.setForeground(new java.awt.Color(0, 0, 0));
        txtMesas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMesasKeyTyped(evt);
            }
        });

        txtNombreSala.setBackground(new java.awt.Color(153, 153, 153));
        txtNombreSala.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtNombreSala.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel17Layout = new javax.swing.GroupLayout(jPanel17);
        jPanel17.setLayout(jPanel17Layout);
        jPanel17Layout.setHorizontalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNombreSalaOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel17Layout.createSequentialGroup()
                        .addComponent(btnEditarSala, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnEliminarSala, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(39, 39, 39))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel17Layout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtNombreSala, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMesas, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(jLabel8))
                .addGap(48, 48, 48))
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addGap(130, 130, 130)
                .addComponent(btnGuardarSala, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel17Layout.setVerticalGroup(
            jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel17Layout.createSequentialGroup()
                .addComponent(jPanel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(txtNombreSalaOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNombreSala, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtMesas, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(btnGuardarSala, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addGroup(jPanel17Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditarSala, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminarSala, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );

        jPanel6.add(jPanel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, 500));

        tableSala.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NOMBRE", "Mesas"
            }
        ));
        tableSala.setRowHeight(23);
        tableSala.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableSalaMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableSala);
        if (tableSala.getColumnModel().getColumnCount() > 0) {
            tableSala.getColumnModel().getColumn(1).setMinWidth(100);
            tableSala.getColumnModel().getColumn(1).setPreferredWidth(100);
            tableSala.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        jPanel6.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 590, 490));

        jTabbedPane1.addTab("", jPanel6);

        PanelMesas.setLayout(new java.awt.GridLayout(1, 0));
        jScrollPane6.setViewportView(PanelMesas);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1018, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("", jPanel7);

        jPanel16.setBackground(new java.awt.Color(153, 153, 153));

        txtBuscarPlato.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtBuscarPlato.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBuscarPlatoKeyReleased(evt);
            }
        });

        btnAddPlato.setBackground(new java.awt.Color(0, 51, 204));
        btnAddPlato.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        btnAddPlato.setForeground(new java.awt.Color(255, 255, 255));
        btnAddPlato.setText("+");
        btnAddPlato.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAddPlato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPlatoActionPerformed(evt);
            }
        });

        tblTemPlatos.setBackground(new java.awt.Color(153, 153, 153));
        tblTemPlatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Precio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTemPlatos.setRowHeight(23);
        jScrollPane14.setViewportView(tblTemPlatos);
        if (tblTemPlatos.getColumnModel().getColumnCount() > 0) {
            tblTemPlatos.getColumnModel().getColumn(1).setMinWidth(100);
            tblTemPlatos.getColumnModel().getColumn(1).setPreferredWidth(100);
            tblTemPlatos.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtBuscarPlato, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAddPlato, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane14, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtBuscarPlato, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(btnAddPlato, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane14)
                .addContainerGap())
        );

        tableMenu.setBackground(new java.awt.Color(153, 153, 153));
        tableMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plato", "Cant", "Precio", "SubTotal", "Comentario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableMenu.setRowHeight(23);
        jScrollPane11.setViewportView(tableMenu);

        jLabel5.setText("Comentario:");

        jScrollPane4.setViewportView(txtComentario);

        btnAgregarComentario.setText("Agregar");
        btnAgregarComentario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarComentarioActionPerformed(evt);
            }
        });

        btnEliminarTempPlato.setText("Eliminar");
        btnEliminarTempPlato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarTempPlatoActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Total a pagar:");

        totalMenu.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        totalMenu.setForeground(new java.awt.Color(0, 0, 0));
        totalMenu.setText("00.00");

        btnGenerarPedido.setBackground(new java.awt.Color(0, 51, 204));
        btnGenerarPedido.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnGenerarPedido.setForeground(new java.awt.Color(255, 255, 255));
        btnGenerarPedido.setText("Realizar Pedido");
        btnGenerarPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerarPedidoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(txtTempIdSala, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(338, 338, 338)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(totalMenu, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(txtTempNumMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(334, 334, 334)
                        .addComponent(btnGenerarPedido))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAgregarComentario, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnEliminarTempPlato))
                        .addGap(14, 14, 14)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(btnAgregarComentario)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminarTempPlato)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(totalMenu)
                        .addGap(18, 18, 18)
                        .addComponent(btnGenerarPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(txtTempIdSala, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtTempNumMesa, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("", jPanel8);

        jPanel9.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel10.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 0, 0));
        jLabel10.setText("Total a Pagar:");
        jPanel9.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 350, -1, -1));

        totalFinalizar.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        totalFinalizar.setForeground(new java.awt.Color(0, 0, 0));
        totalFinalizar.setText("00.00");
        jPanel9.add(totalFinalizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 380, -1, -1));

        btnPdfPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pdf.png"))); // NOI18N
        btnPdfPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPdfPedidoActionPerformed(evt);
            }
        });
        jPanel9.add(btnPdfPedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 430, 100, 40));

        btnFinalizar.setBackground(new java.awt.Color(204, 51, 0));
        btnFinalizar.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnFinalizar.setForeground(new java.awt.Color(255, 255, 255));
        btnFinalizar.setText("Finalizar");
        btnFinalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarActionPerformed(evt);
            }
        });
        jPanel9.add(btnFinalizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 430, 100, 40));
        jPanel9.add(txtIdPedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 370, 50, -1));
        jPanel9.add(txtIdHistorialPedido, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 420, 50, -1));

        jLabel12.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("N° Mesa:");
        jPanel9.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 450, -1, -1));

        jLabel14.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Sala:");
        jPanel9.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 400, -1, -1));
        jPanel9.add(txtNumMesaFinalizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 450, 180, 30));
        jPanel9.add(txtSalaFinalizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 400, 180, 30));

        tableFinalizar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plato", "Cant", "Precio", "SubTotal", "Comentario"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableFinalizar.setRowHeight(23);
        jScrollPane13.setViewportView(tableFinalizar);

        jPanel9.add(jScrollPane13, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 10, 970, 316));

        jTabbedPane1.addTab("", jPanel9);

        jPanel10.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel22.setBackground(new java.awt.Color(0, 51, 204));

        jLabel11.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("HISTORIAL PEDIDOS");

        javax.swing.GroupLayout jPanel22Layout = new javax.swing.GroupLayout(jPanel22);
        jPanel22.setLayout(jPanel22Layout);
        jPanel22Layout.setHorizontalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel22Layout.createSequentialGroup()
                .addGap(380, 380, 380)
                .addComponent(jLabel11)
                .addContainerGap(407, Short.MAX_VALUE))
        );
        jPanel22Layout.setVerticalGroup(
            jPanel22Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel22Layout.createSequentialGroup()
                .addContainerGap(16, Short.MAX_VALUE)
                .addComponent(jLabel11)
                .addContainerGap())
        );

        jPanel10.add(jPanel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 50));

        TablePedidos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Sala", "Atendido", "N° Mesa", "Fecha", "Total", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablePedidos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        TablePedidos.setRowHeight(23);
        TablePedidos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablePedidosMouseClicked(evt);
            }
        });
        jScrollPane12.setViewportView(TablePedidos);

        jPanel10.add(jScrollPane12, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 970, 440));

        jTabbedPane1.addTab("", jPanel10);

        jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel16.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 0, 0));
        jLabel16.setText("RUC:");

        jLabel17.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(0, 0, 0));
        jLabel17.setText("NOMBRE:");

        jLabel18.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 0, 0));
        jLabel18.setText("DIRECCION:");

        jLabel19.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 0));
        jLabel19.setText("TELEFONO:");

        txtIdConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdConfigActionPerformed(evt);
            }
        });

        btnActualizarConfig.setText("MODIFICAR");
        btnActualizarConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarConfigActionPerformed(evt);
            }
        });

        jLabel20.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(0, 0, 0));
        jLabel20.setText("MENSAJE:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(155, 155, 155)
                .addComponent(jLabel20)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(btnActualizarConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(txtIdConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(71, 71, 71))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel18)
                            .addComponent(txtNombreConfig, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(txtDireccionConfig))
                        .addGap(32, 32, 32))))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                        .addComponent(jLabel17)
                        .addGap(125, 125, 125))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(txtRucConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19)
                            .addComponent(txtTelefonoConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtMensaje))
                        .addGap(32, 32, 32))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRucConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombreConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelefonoConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDireccionConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtMensaje, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtIdConfig, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnActualizarConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42))
        );

        jPanel11.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 80, 400, 390));

        jPanel21.setBackground(new java.awt.Color(0, 51, 204));

        jLabel15.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("DATOS DE LA EMPRESA");

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1030, Short.MAX_VALUE)
            .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel21Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel15)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 60, Short.MAX_VALUE)
            .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel21Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLabel15)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel11.add(jPanel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1030, 60));

        jLabel21.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Logote1.png"))); // NOI18N
        jPanel11.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, 400, 400));

        jTabbedPane1.addTab("", jPanel11);

        jPanel19.setBackground(new java.awt.Color(204, 204, 204));
        jPanel19.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel20.setBackground(new java.awt.Color(0, 51, 204));

        jLabel22.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel22.setForeground(new java.awt.Color(255, 255, 255));
        jLabel22.setText("NUEVO USUARIO");

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(jLabel22)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel22)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        txtUsuario.setBackground(new java.awt.Color(153, 153, 153));
        txtUsuario.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtUsuario.setForeground(new java.awt.Color(0, 0, 0));

        jLabel23.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel23.setForeground(new java.awt.Color(0, 0, 0));
        jLabel23.setText("USUARIO:");

        jLabel24.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel24.setForeground(new java.awt.Color(0, 0, 0));
        jLabel24.setText("CONTRASEÑA:");

        btnRegistrarUsuario.setBackground(new java.awt.Color(0, 51, 204));
        btnRegistrarUsuario.setForeground(new java.awt.Color(255, 255, 255));
        btnRegistrarUsuario.setText("REGISTRAR");
        btnRegistrarUsuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarUsuarioActionPerformed(evt);
            }
        });

        txtIdSala1.setBackground(new java.awt.Color(204, 204, 204));
        txtIdSala1.setBorder(null);
        txtIdSala1.setOpaque(true);

        jLabel25.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel25.setForeground(new java.awt.Color(0, 0, 0));
        jLabel25.setText("ROL:");

        txtNombre.setBackground(new java.awt.Color(153, 153, 153));
        txtNombre.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtNombre.setForeground(new java.awt.Color(0, 0, 0));

        jLabel26.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(0, 0, 0));
        jLabel26.setText("NOMBRE:");

        cbxRol.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Administrador", "Asistente" }));

        txtPass.setBackground(new java.awt.Color(153, 153, 153));
        txtPass.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtPass.setForeground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel19Layout.createSequentialGroup()
                                .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIdSala1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel19Layout.createSequentialGroup()
                                .addGap(43, 43, 43)
                                .addComponent(btnRegistrarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                        .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26)
                            .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                .addComponent(jLabel25)
                                .addComponent(txtUsuario, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                .addComponent(jLabel24)
                                .addComponent(cbxRol, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(60, 60, 60))))
        );
        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel19Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(txtIdSala1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel19Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel24)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPass, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel26)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel25)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxRol, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addComponent(btnRegistrarUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(31, Short.MAX_VALUE))
        );

        TableUsuarios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Usuario", "Rol"
            }
        ));
        TableUsuarios.setRowHeight(23);
        jScrollPane10.setViewportView(TableUsuarios);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane10))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("", jPanel12);

        jPanel14.setBackground(new java.awt.Color(204, 204, 204));
        jPanel14.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel15.setBackground(new java.awt.Color(0, 51, 204));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Platos y Bebidas del Día");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(37, 37, 37))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("NOMBRE:");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("PRECIO:");

        btnGuardarPlatos.setBackground(new java.awt.Color(0, 51, 204));
        btnGuardarPlatos.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnGuardarPlatos.setForeground(new java.awt.Color(255, 255, 255));
        btnGuardarPlatos.setText("GUARDAR");
        btnGuardarPlatos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuardarPlatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarPlatosActionPerformed(evt);
            }
        });

        btnEditar.setBackground(new java.awt.Color(153, 153, 153));
        btnEditar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEditar.setForeground(new java.awt.Color(255, 255, 255));
        btnEditar.setText("EDITAR");
        btnEditar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnEliminar.setBackground(new java.awt.Color(204, 51, 0));
        btnEliminar.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnEliminar.setForeground(new java.awt.Color(255, 255, 255));
        btnEliminar.setText("ELIMINAR");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        txtNombrePlato.setBackground(new java.awt.Color(153, 153, 153));
        txtNombrePlato.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtNombrePlato.setForeground(new java.awt.Color(0, 0, 0));
        txtNombrePlato.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        txtPrecioPlato.setBackground(new java.awt.Color(153, 153, 153));
        txtPrecioPlato.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        txtPrecioPlato.setForeground(new java.awt.Color(0, 0, 0));
        txtPrecioPlato.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioPlatoKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtNombrePlato)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtPrecioPlato, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnGuardarPlatos, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNombrePlatoOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(78, 78, 78)))
                .addGap(46, 46, 46))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel14Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(74, 74, 74)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNombrePlato, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPrecioPlato, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addComponent(btnGuardarPlatos, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(txtNombrePlatoOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );

        TablePlatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DESCRIPCIÓN", "PRECIO"
            }
        ));
        TablePlatos.setRowHeight(23);
        TablePlatos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablePlatosMouseClicked(evt);
            }
        });
        jScrollPane9.setViewportView(TablePlatos);
        if (TablePlatos.getColumnModel().getColumnCount() > 0) {
            TablePlatos.getColumnModel().getColumn(1).setMinWidth(100);
            TablePlatos.getColumnModel().getColumn(1).setPreferredWidth(100);
            TablePlatos.getColumnModel().getColumn(1).setMaxWidth(100);
        }

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 621, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane9))
                .addContainerGap())
        );

        jTabbedPane1.addTab("", jPanel13);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(51, 51, 51)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1030, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(45, 45, 45))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnPlatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlatosActionPerformed
        try {
            // TODO add your handling code here:

            jTabbedPane1.setSelectedIndex(8);
            LimpiarTable();
            ListarPlatos(TablePlatos);
        } catch (PersistenciaException ex) {
            Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrio un error", ex);
        }

    }//GEN-LAST:event_btnPlatosActionPerformed

    private void btnGuardarPlatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarPlatosActionPerformed
        // Verifica que los campos de nombre y precio no estén vacíos
        if (!txtNombrePlato.getText().isEmpty() && !txtPrecioPlato.getText().isEmpty()) {
            try {
                // Crea un objeto PlatosDTO y establece los valores del nombre, precio y fecha
                PlatosDTO platoDTO = new PlatosDTO();
                platoDTO.setNombre(txtNombrePlato.getText());
                platoDTO.setPrecio(Double.parseDouble(txtPrecioPlato.getText()));
                platoDTO.setFecha(new Date());

                // Llama al método registrarPlato del controlador con el objeto PlatosDTO
                if (platoBO.registrarPlato(platoDTO)) {
                    // Muestra un mensaje de éxito y realiza otras operaciones, como limpiar la tabla y los campos de entrada
                    JOptionPane.showMessageDialog(null, "Plato Registrado");
                    LimpiarTable();
                    ListarPlatos(TablePlatos);
                    LimpiarPlatos();
                }
            } catch (NumberFormatException ex) {
                // Maneja la excepción si el formato del precio no es válido
                JOptionPane.showMessageDialog(null, "El precio debe ser un número válido");
            } catch (PersistenciaException ex) {
                // Maneja cualquier excepción de persistencia mostrando un mensaje de error
                Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error", ex);
            }
        } else {
            // Si los campos de nombre o precio están vacíos, muestra un mensaje de advertencia
            JOptionPane.showMessageDialog(null, "Los campos están vacíos");
        }

    }//GEN-LAST:event_btnGuardarPlatosActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
// Verifica si se ha seleccionado una fila
        int selectedRow = TablePlatos.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Por favor, seleccione una fila para actualizar");
            return;
        }

        // Verifica si se han ingresado datos en los campos de nombre o precio
        if (!txtNombrePlato.getText().isEmpty() || !txtPrecioPlato.getText().isEmpty()) {
            try {
                // Crea un objeto PlatosDTO con los datos ingresados
                PlatosDTO platoDTO = new PlatosDTO();
                // Usar el nombre original del plato como identificador
                String nombreOriginal = txtNombrePlatoOriginal.getText();
                platoDTO.setNombre(txtNombrePlato.getText());

                String precioText = txtPrecioPlato.getText();
                if (!precioText.isEmpty()) {
                    platoDTO.setPrecio(Double.parseDouble(precioText));
                }

                // Imprimir valores para depuración
                System.out.println("Nombre Original: " + nombreOriginal);
                System.out.println("Modificando Plato: " + platoDTO.getNombre() + ", Precio: " + platoDTO.getPrecio());

                // Llama al método Modificar del controlador y verifica si se ha realizado la modificación
                if (platoBO.modificarPlato(nombreOriginal, platoDTO)) {
                    JOptionPane.showMessageDialog(null, "Plato Modificado");
                    LimpiarTable();
                    ListarPlatos(TablePlatos);
                    LimpiarPlatos();
                } else {
                    JOptionPane.showMessageDialog(null, "No se pudo modificar el plato");
                }
            } catch (NumberFormatException ex) {
                // Maneja la excepción si el formato del precio no es válido
                JOptionPane.showMessageDialog(null, "El precio debe ser un número válido");
            } catch (PersistenciaException ex) {
                // Maneja cualquier excepción de persistencia mostrando un mensaje de error
                Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error", ex);
                JOptionPane.showMessageDialog(null, "Ocurrió un error al intentar modificar el plato");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Por favor, ingrese datos en los campos de nombre o precio");
        }


    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        // Verifica si se ha ingresado un nombre de plato válido
        if (!txtNombrePlatoOriginal.getText().isEmpty()) {
            // Muestra un mensaje de confirmación para confirmar la eliminación
            int pregunta = JOptionPane.showConfirmDialog(null, "¿Está seguro de eliminar?");
            if (pregunta == JOptionPane.YES_OPTION) {
                try {
                    // Obtiene el nombre del plato a eliminar
                    String nombrePlato = txtNombrePlatoOriginal.getText();
                    // Llama al método Eliminar del controlador para eliminar el plato
                    if (platoBO.eliminarPlato(nombrePlato)) {
                        // Actualiza la tabla y limpia los campos de entrada
                        LimpiarTable();
                        LimpiarPlatos();
                        ListarPlatos(TablePlatos);
                    } else {
                        JOptionPane.showMessageDialog(null, "No se pudo eliminar el plato");
                    }
                } catch (PersistenciaException ex) {
                    // Maneja cualquier excepción de persistencia mostrando un mensaje de error
                    Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error", ex);
                }
            }
        } else {
            // Muestra un mensaje de advertencia si no se ha seleccionado ningún plato
            JOptionPane.showMessageDialog(null, "Seleccione una fila");
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnAgregarComentarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarComentarioActionPerformed
//        // TODO add your handling code here:

        if (tableMenu.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(null, "SELECCIONE UNA FILA");
            return;
        }

        // Obtener el ID de la fila seleccionada
        int id = Integer.parseInt(tableMenu.getValueAt(tableMenu.getSelectedRow(), 0).toString());

        // Recorrer las filas de la tabla
        for (int i = 0; i < tableMenu.getRowCount(); i++) {
            // Verificar si el ID coincide con el de la fila actual
            if (tableMenu.getValueAt(i, 0).equals(id)) {
                // Actualizar el comentario en la fila correspondiente
                tmp.setValueAt(txtComentario.getText(), i, 5);
                txtComentario.setText("");
                tableMenu.clearSelection();
                return;
            }
        }

    }//GEN-LAST:event_btnAgregarComentarioActionPerformed

    private void btnEliminarTempPlatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarTempPlatoActionPerformed
//        // TODO add your handling code here:
//
        modelo = (DefaultTableModel) tableMenu.getModel();
        modelo.removeRow(tableMenu.getSelectedRow());
        TotalPagar(tableMenu, totalMenu);

    }//GEN-LAST:event_btnEliminarTempPlatoActionPerformed

    private void btnAddPlatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPlatoActionPerformed
        if (tblTemPlatos.getSelectedRow() >= 0) {
            try {
                String nombrePlato = tblTemPlatos.getValueAt(tblTemPlatos.getSelectedRow(), 0).toString();
                String precioStr = tblTemPlatos.getValueAt(tblTemPlatos.getSelectedRow(), 1).toString();
                double precio = Double.parseDouble(precioStr);

                double total = 1 * precio;
                item = item + 1;
                tmp = (DefaultTableModel) tableMenu.getModel();
                for (int i = 0; i < tableMenu.getRowCount(); i++) {
                    if (tableMenu.getValueAt(i, 0).equals(nombrePlato)) {
                        int cantActual = Integer.parseInt(tableMenu.getValueAt(i, 1).toString());
                        int nuevoCantidad = cantActual + 1;
                        double nuevoSub = precio * nuevoCantidad;
                        tmp.setValueAt(nuevoCantidad, i, 1);
                        tmp.setValueAt(nuevoSub, i, 3);
                        TotalPagar(tableMenu, totalMenu);
                        return;
                    }
                }
                ArrayList lista = new ArrayList();
                lista.add(nombrePlato);
                lista.add(1);
                lista.add(precio);
                lista.add(total);
                Object[] O = new Object[5];
                O[0] = lista.get(0);
                O[1] = lista.get(1);
                O[2] = lista.get(2);
                O[3] = lista.get(3);
                O[4] = "";
                tmp.addRow(O);
                tableMenu.setModel(tmp);
                TotalPagar(tableMenu, totalMenu);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Error: El precio no es un número válido");
                return;
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error al procesar el plato: " + e.getMessage());
                return;
            }
        } else {
            JOptionPane.showMessageDialog(null, "SELECCIONA UNA FILA");
        }

    }//GEN-LAST:event_btnAddPlatoActionPerformed

    private void btnGenerarPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerarPedidoActionPerformed
        // TODO add your handling code here:

        // Verificar si hay productos en la tabla
        if (tableMenu.getRowCount() > 0) {
            try {
                // Registrar el pedido y los detalles del pedido
                RegistrarPedido();

                // Limpiar la tabla de menú
                LimpiarTableMenu();

                // Cambiar al primer panel
                jTabbedPane1.setSelectedIndex(0);
            } catch (PersistenciaException ex) {
                // Manejar errores de persistencia
                JOptionPane.showMessageDialog(this, "Error al registrar el pedido. Por favor, inténtelo de nuevo más tarde.", "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error al registrar el pedido", ex);
            }
        } else {
            // Mostrar un mensaje si no hay productos en la tabla
            JOptionPane.showMessageDialog(null, "NO HAY PRODUCTO EN LA PEDIDO");
        }

    }//GEN-LAST:event_btnGenerarPedidoActionPerformed

    private void btnGuardarSalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarSalaActionPerformed
        // Verificar si los campos están vacíos
        if (txtNombreSala.getText().isEmpty() || txtMesas.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Los campos están vacíos");
        } else {
            // Crear un objeto SalaDTO y establecer los valores del nombre y número de mesas
            SalaDTO salaDTO = new SalaDTO();
            salaDTO.setNombre(txtNombreSala.getText());
            salaDTO.setMesas(Integer.parseInt(txtMesas.getText()));

            try {
                // Registrar la sala directamente con el DTO
                salaBO.registrarSala(salaDTO);

                // Mostrar mensaje de éxito y actualizar la interfaz
                JOptionPane.showMessageDialog(null, "Sala Registrada");
                LimpiarSala();
                LimpiarTable();
                ListarSalas();
            } catch (PersistenciaException ex) {
                Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error", ex);
            }
        }

    }//GEN-LAST:event_btnGuardarSalaActionPerformed

    private void btnEditarSalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarSalaActionPerformed
// Verificar si el nombre original está vacío
        if (txtNombreSalaOriginal.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Seleccione una fila");
        } else {
            // Verificar si el campo de nombre no está vacío
            if (!txtNombreSala.getText().isEmpty()) {
                // Crear un objeto SalaDTO y establecer los valores del nombre original y nuevo
                SalaDTO salaDTO = new SalaDTO();
                String nombreOriginal = txtNombreSalaOriginal.getText();
                salaDTO.setNombre(txtNombreSala.getText());
                salaDTO.setMesas(Integer.parseInt(txtMesas.getText()));

                try {
                    // Llamar al método para modificar la sala con el nombre original y el DTO
                    if (salaBO.modificarSala(nombreOriginal, salaDTO)) {
                        // Mostrar mensaje de éxito y actualizar la interfaz
                        JOptionPane.showMessageDialog(null, "Sala Modificada");
                        LimpiarSala();
                        LimpiarTable();
                        ListarSalas();
                    } else {
                        JOptionPane.showMessageDialog(null, "No se pudo modificar la sala");
                    }
                } catch (PersistenciaException ex) {
                    Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error", ex);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, ingrese un nombre de sala");
            }
        }


    }//GEN-LAST:event_btnEditarSalaActionPerformed

    private void btnEliminarSalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarSalaActionPerformed
        // Verificar si el nombre original está vacío
        if (!txtNombreSalaOriginal.getText().isEmpty()) {
            // Confirmar la eliminación
            int pregunta = JOptionPane.showConfirmDialog(null, "¿Está seguro de eliminar?");
            if (pregunta == JOptionPane.YES_OPTION) {
                // Obtener el nombre de la sala
                String nombreSala = txtNombreSalaOriginal.getText();
                try {
                    // Llamar al método para eliminar la sala
                    if (salaBO.eliminarSala(nombreSala)) {
                        // Limpiar la interfaz y actualizar la lista de salas
                        LimpiarSala();
                        LimpiarTable();
                        ListarSalas();
                    } else {
                        JOptionPane.showMessageDialog(null, "No se pudo eliminar la sala");
                    }
                } catch (PersistenciaException ex) {
                    Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error", ex);
                }
            }
        } else {
            // Mostrar un mensaje si no se ha seleccionado ninguna fila
            JOptionPane.showMessageDialog(null, "Seleccione una fila");
        }

    }//GEN-LAST:event_btnEliminarSalaActionPerformed

    private void btnSalaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalaActionPerformed
        // TODO add your handling code here:

        LimpiarTable();
        try {
            ListarSalas();
        } catch (PersistenciaException ex) {
            Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrio un error", ex);
        }
        jTabbedPane1.setSelectedIndex(1);

    }//GEN-LAST:event_btnSalaActionPerformed

    private void btnPdfPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPdfPedidoActionPerformed
        // TODO add your handling code here:

//        if (txtIdHistorialPedido.getText().equals("")) {
//            JOptionPane.showMessageDialog(null, "Seleccione una fila");
//        } else {
//            try {
//                pedidoControl.pdfPedido(Integer.parseInt(txtIdHistorialPedido.getText()));
//            } catch (DocumentException ex) {
//                Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrio un error", ex);
//            }
//            txtIdHistorialPedido.setText("");
//        }

    }//GEN-LAST:event_btnPdfPedidoActionPerformed

    private void btnFinalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarActionPerformed
        // TODO add your handling code here:
        try {
            String idPedido = txtIdHistorialPedido.getText();
            pedidoBO.finalizarPedido(idPedido);
            JOptionPane.showMessageDialog(this, "Pedido finalizado correctamente.", "Éxito", JOptionPane.INFORMATION_MESSAGE);

            // Opcional: Actualizar la vista o realizar alguna otra acción
            // Por ejemplo, limpiar campos o refrescar la lista de pedidos
        } catch (PersistenciaException e) {
            JOptionPane.showMessageDialog(this, "Error al finalizar el pedido: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Error al finalizar el pedido", e);
        }
    }//GEN-LAST:event_btnFinalizarActionPerformed

    private void txtIdConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdConfigActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdConfigActionPerformed

    private void btnPedidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPedidosActionPerformed
        LimpiarTable();
        try {
            ListarPedidos(); // Listar todos los pedidos sin especificar sala o mesa
        } catch (PersistenciaException ex) {
            Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error", ex);
        }
        jTabbedPane1.setSelectedIndex(5); // Cambiar a la pestaña de pedidos

    }//GEN-LAST:event_btnPedidosActionPerformed

    private void btnConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfigActionPerformed
        try {
            // TODO add your handling code here:

            jTabbedPane1.setSelectedIndex(6);
            ListarConfig();
        } catch (PersistenciaException ex) {
            Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrio un error", ex);
        }

    }//GEN-LAST:event_btnConfigActionPerformed

    private void btnActualizarConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarConfigActionPerformed
        // TODO add your handling code here:
//
        if (!"".equals(txtRucConfig.getText()) || !"".equals(txtNombreConfig.getText())
                || !"".equals(txtTelefonoConfig.getText()) || !"".equals(txtDireccionConfig.getText())) {
            try {
                ConfigDTO configDto = new ConfigDTO();
                configDto.setRuc(txtRucConfig.getText());
                configDto.setNombre(txtNombreConfig.getText());
                configDto.setTelefono(txtTelefonoConfig.getText());
                configDto.setDireccion(txtDireccionConfig.getText());
                configDto.setMensaje(txtMensaje.getText());

                configBO.modificarDatos(configDto);

                JOptionPane.showMessageDialog(null, "Datos de la empresa modificados");
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Error: ID no válido");
            } catch (PersistenciaException ex) {
                Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error", ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Los campos están vacíos");
        }

    }//GEN-LAST:event_btnActualizarConfigActionPerformed

    private void btnUsuariosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUsuariosActionPerformed
        try {
            // TODO add your handling code here:

            LimpiarTable();
            ListarUsuarios();
            jTabbedPane1.setSelectedIndex(7);
        } catch (PersistenciaException ex) {
            Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrio un error", ex);
        }

    }//GEN-LAST:event_btnUsuariosActionPerformed

    private void txtBuscarPlatoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBuscarPlatoKeyReleased
        try {
            // TODO add your handling code here:

            LimpiarTable();
            ListarPlatos(tblTemPlatos);
        } catch (PersistenciaException ex) {
            Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrio un error", ex);
        }


    }//GEN-LAST:event_txtBuscarPlatoKeyReleased

    private void btnRegistrarUsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarUsuarioActionPerformed
        // Verificar si los campos están vacíos
        if (txtNombre.getText().isEmpty() || txtUsuario.getText().isEmpty() || String.valueOf(txtPass.getPassword()).isEmpty()) {
            JOptionPane.showMessageDialog(null, "Todos los campos son requeridos");
        } else {
            try {
                // Crear un nuevo objeto UsuarioDTO y establecer sus atributos
                UsuarioDTO usuarioDTO = new UsuarioDTO();
                usuarioDTO.setNombre(txtNombre.getText());
                usuarioDTO.setUsuario(txtUsuario.getText());
                usuarioDTO.setPass(String.valueOf(txtPass.getPassword()));
                usuarioDTO.setRol(cbxRol.getSelectedItem().toString());

                // Llamar al método registrarUsuario del objeto UsuarioBO
                usuarioBO.registrarUsuario(usuarioDTO);

                // Mostrar un mensaje de éxito
                JOptionPane.showMessageDialog(null, "Usuario Registrado");

                // Limpiar los campos después del registro
                txtNombre.setText("");
                txtUsuario.setText("");
                txtPass.setText("");
                cbxRol.setSelectedIndex(0);

                // Actualizar la tabla de usuarios
                LimpiarTable();
                ListarUsuarios();

            } catch (PersistenciaException ex) {
                // Manejar la excepción
                Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error al registrar usuario", ex);
            }
        }

    }//GEN-LAST:event_btnRegistrarUsuarioActionPerformed

    private void TablePlatosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablePlatosMouseClicked
        // Obtener la fila seleccionada
        int fila = TablePlatos.rowAtPoint(evt.getPoint());

        // Verificar si la fila es válida
        if (fila >= 0) {
            // Obtener los valores de la fila seleccionada y mostrarlos en los campos de texto
            Object nombre = TablePlatos.getValueAt(fila, 0); // Asumiendo que la columna 0 es el nombre
            Object precio = TablePlatos.getValueAt(fila, 1); // Asumiendo que la columna 1 es el precio

            if (nombre != null) {
                txtNombrePlato.setText(nombre.toString());
                txtNombrePlatoOriginal.setText(nombre.toString()); // Campo invisible o de solo lectura para el nombre original
            }
            if (precio != null) {
                txtPrecioPlato.setText(precio.toString());
            }
        }
    }//GEN-LAST:event_TablePlatosMouseClicked

    private void TablePedidosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablePedidosMouseClicked
        int fila = TablePedidos.rowAtPoint(evt.getPoint());

        // Verificar si la fila seleccionada es válida y si la tabla tiene datos
        if (fila >= 0 && fila < TablePedidos.getRowCount() && TablePedidos.getRowCount() > 0) {
            // Verificar si existen suficientes columnas y si los valores son válidos
            if (TablePedidos.getColumnCount() > 2) {
                try {
                    String nombrePedido = TablePedidos.getValueAt(fila, 0).toString();
                    String nombreSala = TablePedidos.getValueAt(fila, 1) != null ? TablePedidos.getValueAt(fila, 1).toString() : ""; // Manejar nulos
                    String numMesaStr = TablePedidos.getValueAt(fila, 2) != null ? TablePedidos.getValueAt(fila, 2).toString() : ""; // Manejar nulos

                    // Verificar si los valores son válidos (no nulos ni vacíos)
                    if (!nombreSala.isEmpty() && !numMesaStr.isEmpty()) {
                        try {
                            int numMesa = Integer.parseInt(numMesaStr);
                            verPedidoYDetalle(nombreSala, numMesa);
                            // ... (resto del código para mostrar detalles)
                        } catch (NumberFormatException ex) {
                            JOptionPane.showMessageDialog(this, "Error al convertir el número de mesa.", "Error", JOptionPane.ERROR_MESSAGE);
                            Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Error de conversión de número de mesa", ex);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "La fila seleccionada no contiene datos completos o válidos.", "Advertencia", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (PersistenciaException ex) {
                    Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error", ex);
                    // Considera mostrar un mensaje de error al usuario aquí también
                }
            } else {
                JOptionPane.showMessageDialog(this, "La tabla no tiene suficientes columnas.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }

    }//GEN-LAST:event_TablePedidosMouseClicked

    private void tableSalaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableSalaMouseClicked
        int fila = tableSala.rowAtPoint(evt.getPoint());
        if (fila >= 0) {

            Object nombre = tableSala.getValueAt(fila, 0);
            Object mesas = tableSala.getValueAt(fila, 1);

            if (nombre != null) {
                txtNombreSala.setText(nombre.toString());
                txtNombreSalaOriginal.setText(nombre.toString());
            }
            if (mesas != null) {
                txtMesas.setText(mesas.toString());
            }
        }
    }//GEN-LAST:event_tableSalaMouseClicked

    private void txtPrecioPlatoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioPlatoKeyTyped
        // TODO add your handling code here:

        eventoDto.numberDecimalKeyPress(evt, txtPrecioPlato);

    }//GEN-LAST:event_txtPrecioPlatoKeyTyped

    private void txtMesasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMesasKeyTyped
        // TODO add your handling code here:

        eventoDto.numberDecimalKeyPress(evt, txtMesas);

    }//GEN-LAST:event_txtMesasKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        jTabbedPane1.setSelectedIndex(0);
        PanelSalas.removeAll();
        try {
            panelSalas();
        } catch (PersistenciaException ex) {
            Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrio un error", ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

//    // ---METODOS LIMPIAR--- //
    public void LimpiarTable() {
        for (int i = 0; i < modelo.getRowCount(); i++) {
            modelo.removeRow(i);
            i = i - 1;
        }
    }

    private void LimpiarPlatos() {
        txtNombrePlato.setText("");
        txtPrecioPlato.setText("");
    }

    private void LimpiarTableMenu() {
        tmp = (DefaultTableModel) tableMenu.getModel();
        int fila = tableMenu.getRowCount();
        for (int i = 0; i < fila; i++) {
            tmp.removeRow(0);
        }
    }

    private void LimpiarSala() {
        txtNombreSalaOriginal.setText("");
        txtNombreSala.setText("");
        txtMesas.setText("");
    }

    // ---METODOS------------------------------------------------------------------------------------------------------------------------------------------------------------------ //
    private void ListarPlatos(JTable tabla) throws PersistenciaException {
        // Obtener la lista de platos
        List<PlatosDTO> platos = platoBO.listarPlatos(txtBuscarPlato.getText(), fechaFormato);
        // Obtener el modelo de la tabla
        modelo = (DefaultTableModel) tabla.getModel();
        // Limpiar el modelo antes de agregar los datos
        modelo.setRowCount(0);
        // Iterar sobre la lista de platos y agregarlos al modelo de la tabla
        for (PlatosDTO plato : platos) {
            // Aquí asumimos que PlatosDTO tiene los campos nombre y precio, ajusta esto según la estructura real de tu DTO
            Object[] ob = new Object[2];
            ob[0] = plato.getNombre();
            ob[1] = plato.getPrecio();
            modelo.addRow(ob);
        }
        // Aplicar estilo al encabezado de la tabla
        colorHeader(tabla);
    }

    private void ListarSalas() throws PersistenciaException {
        List<SalaDTO> Listar = salaBO.listarSalas();
        modelo = (DefaultTableModel) tableSala.getModel();
        Object[] ob = new Object[2];
        for (int i = 0; i < Listar.size(); i++) {
            ob[0] = Listar.get(i).getNombre();
            ob[1] = Listar.get(i).getMesas();
            modelo.addRow(ob);
        }
        colorHeader(tableSala);

    }

    private void colorHeader(JTable tabla) {
        tabla.setModel(modelo);
        JTableHeader header = tabla.getTableHeader();
        header.setOpaque(false);
        header.setBackground(Color.BLUE);
        header.setForeground(Color.WHITE);
    }
//

    private void TotalPagar(JTable tabla, JLabel totalMenu) {
        double total = 0;
        for (int i = 0; i < tabla.getRowCount(); i++) {
            String cantidadStr = tabla.getValueAt(i, 1).toString();
            String subTotalStr = tabla.getValueAt(i, 3).toString();
            if (!cantidadStr.isEmpty() && !subTotalStr.isEmpty()) {
                double cantidad = Double.parseDouble(cantidadStr);
                double subTotal = Double.parseDouble(subTotalStr);
                total += subTotal;
            }
        }
        totalMenu.setText(String.valueOf(total));
    }
////
//

    private void RegistrarPedido() throws PersistenciaException {
        try {
            // Obtener valores del formulario
            String nombreSala = txtTempIdSala.getText();
            int numMesa = Integer.parseInt(txtTempNumMesa.getText());
            double total = Double.parseDouble(totalMenu.getText());
            String usuario = LabelVendedor.getText();
            String estado = "PENDIENTE";

            // Crear objeto DTO con los valores obtenidos
            PedidoDTO pedidoDto = new PedidoDTO();
            pedidoDto.setNombreSala(nombreSala);
            pedidoDto.setNumMesa(numMesa);
            pedidoDto.setFecha(new Date());
            pedidoDto.setEstado(estado);
            pedidoDto.setTotal(total);
            pedidoDto.setUsuario(usuario);

            // Obtener los detalles del pedido desde la tabla de la interfaz de usuario
            List<DetallePedidoDTO> detalles = obtenerDetallesPedido();

            // Registrar el pedido y sus detalles
            pedidoBO.registrarPedidoYPedidosDetalle(pedidoDto, detalles);

            // Mostrar mensaje de éxito al usuario
            JOptionPane.showMessageDialog(this, "Pedido registrado.", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Por favor, ingrese un número válido para el número de mesa.", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (PersistenciaException ex) {
            JOptionPane.showMessageDialog(this, "Error al registrar el pedido y sus detalles: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error al registrar el pedido", ex);
        }
    }

    private List<DetallePedidoDTO> obtenerDetallesPedido() {
        List<DetallePedidoDTO> detallesPedido = new ArrayList<>();

        for (int i = 0; i < tableMenu.getRowCount(); i++) {
            // Obtener los valores de la tabla
            String nombre = tableMenu.getValueAt(i, 0).toString();
            int cant = Integer.parseInt(tableMenu.getValueAt(i, 1).toString());
            double precio = Double.parseDouble(tableMenu.getValueAt(i, 2).toString());
            String comentario = tableMenu.getValueAt(i, 4).toString();

            // Crear un objeto de DetallePedido
            DetallePedidoDTO detallePedido = new DetallePedidoDTO(nombre, precio, cant, comentario);

            // Agregar detalle del pedido a la lista
            detallesPedido.add(detallePedido);
        }

        return detallesPedido;
    }
//

    private void panelSalas() throws PersistenciaException {
        // Limpiar el panel antes de agregar nuevos botones
        PanelSalas.removeAll();

        try {
            List<SalaDTO> salas = salaBO.listarSalas();

            for (SalaDTO sala : salas) {
                JButton boton = new JButton(sala.getNombre(), new ImageIcon(getClass().getResource("/images/salas.png")));
                boton.setCursor(new Cursor(Cursor.HAND_CURSOR));
                boton.setHorizontalTextPosition(JButton.CENTER);
                boton.setVerticalTextPosition(JButton.BOTTOM);
                boton.setBackground(new Color(204, 204, 204));
                PanelSalas.add(boton);

                String nombreSala = sala.getNombre();
                int cantidadMesas = sala.getMesas();

                boton.addActionListener((ActionEvent e) -> {
                    LimpiarTable();
                    PanelMesas.removeAll();
                    panelMesas(nombreSala, cantidadMesas);
                    jTabbedPane1.setSelectedIndex(2);
                });
            }

            // Vuelve a validar y repintar el panel
            PanelSalas.validate();
            PanelSalas.repaint();
        } catch (PersistenciaException ex) {
            Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error al listar las salas", ex);
        }
    }
//

    private void panelMesas(String nombreSala, int cant) {
        for (int i = 1; i <= cant; i++) {
            int numMesa = i;
            JButton boton = new JButton("MESA N°: " + i, new ImageIcon(getClass().getResource("/images/mesa.png")));
            boton.setHorizontalTextPosition(JButton.CENTER);
            boton.setVerticalTextPosition(JButton.BOTTOM);

            try {
                // Verificar el estado del pedido para esta mesa y sala
                String verificar = pedidoBO.verificarEstado(numMesa, nombreSala);

                // Configurar el color del botón según el estado del pedido
                if (verificar != null) {
                    boton.setBackground(new Color(153, 51, 0)); // Cambia el color a rojo si hay un pedido pendiente
                } else {
                    boton.setBackground(new Color(0, 102, 51)); // Mantén el color normal si no hay pedido pendiente
                }
                boton.setForeground(Color.WHITE);
                boton.setFocusable(false);
                boton.setCursor(new Cursor(Cursor.HAND_CURSOR));
                PanelMesas.add(boton);

                // Agregar un ActionListener al botón para manejar eventos de clic
                boton.addActionListener((ActionEvent e) -> {
                    try {
                        if (verificar != null) {
                            // Si hay un pedido pendiente, mostrar los detalles del pedido
                            LimpiarTable();
                            verPedidoYDetalle(nombreSala, numMesa); // Método actualizado para mostrar pedido y detalles
                            btnFinalizar.setEnabled(true);
                            btnPdfPedido.setEnabled(false);
                            jTabbedPane1.setSelectedIndex(4);
                        } else {
                            // Si no hay pedido pendiente, mostrar la lista de platos para seleccionar
                            LimpiarTable();
                            ListarPlatos(tblTemPlatos);
                            jTabbedPane1.setSelectedIndex(3);
                            txtTempIdSala.setText(nombreSala);
                            txtTempNumMesa.setText(String.valueOf(numMesa));
                        }
                    } catch (PersistenciaException ex) {
                        // Manejar errores de persistencia
                        Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error", ex);
                    }
                });
            } catch (PersistenciaException ex) {
                // Manejar errores de persistencia al verificar el estado de la mesa
                Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error al verificar el estado de la mesa", ex);
            }
        }
    }

    public void verPedidoYDetalle(String nombreSala, int numMesa) throws PersistenciaException {
        try {
            // Obtener el pedido y sus detalles
            PedidoDTO pedido = pedidoBO.verPedido(nombreSala, numMesa);
            if (pedido != null) {
                List<DetallePedidoDTO> detalles = pedido.getDetalles();

                // Mostrar la información del pedido en los campos correspondientes
                totalFinalizar.setText(String.valueOf(pedido.getTotal()));
                txtSalaFinalizar.setText(nombreSala);
                txtNumMesaFinalizar.setText(String.valueOf(numMesa));
                txtIdHistorialPedido.setText(pedido.getNombreSala());
                txtIdPedido.setText(pedido.getNombreSala());

                // Limpiar el modelo de la tabla antes de agregar los nuevos detalles
                DefaultTableModel modelo = (DefaultTableModel) tableFinalizar.getModel();
                modelo.setRowCount(0);

                // Mostrar los detalles del pedido en la tabla
                for (DetallePedidoDTO detalle : detalles) {
                    Object[] ob = new Object[5];
                    ob[0] = detalle.getNombre();  // Nombre del producto
                    ob[1] = detalle.getCantidad();  // Cantidad
                    ob[2] = detalle.getPrecio();  // Precio unitario
                    ob[3] = detalle.getCantidad() * detalle.getPrecio();  // Precio total
                    ob[4] = detalle.getComentario();  // Comentario

                    modelo.addRow(ob);
                }

                // Aplicar el estilo al encabezado de la tabla
                colorHeader(tableFinalizar);
            } else {
                // Manejar el caso en que no se encuentre el pedido
                JOptionPane.showMessageDialog(this, "No se encontró el pedido para la sala y mesa especificadas.", "Pedido no encontrado", JOptionPane.WARNING_MESSAGE);
            }
        } catch (PersistenciaException e) {
            // Manejar la excepción si ocurre algún error al obtener el pedido y sus detalles
            JOptionPane.showMessageDialog(this, "Error al obtener el pedido y sus detalles: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Error al obtener el pedido y sus detalles", e);
        }
    }

//
////
//    public Pedido obtenerPedidoDesdeDocumento(Document doc) {
//        Pedido pedidoDTO = new Pedido();
//        pedidoDTO.setId(doc.getInteger("_id", 0)); // Si _id es nulo, establece un valor predeterminado (0)
//        // Obtener el ID de la sala desde el documento
//        int salaId = doc.getInteger("sala", 0); // Suponiendo que "sala" es el ID de la sala en el documento
//        // Cargar la sala desde la base de datos utilizando el ID
//        Sala sala = obtenerSalaPorId(salaId);
//        pedidoDTO.setSala(sala);
//        pedidoDTO.setUsuario(doc.getString("usuario"));
//        pedidoDTO.setNumMesa(doc.getInteger("numMesa", 0)); // Si numMesa es nulo, establece un valor predeterminado (0)
//        pedidoDTO.setFecha(doc.getDate("fecha"));
//        pedidoDTO.setTotal(doc.getDouble("total")); // Si total es nulo, establece un valor predeterminado (0.0)
//        pedidoDTO.setEstado(doc.getString("estado"));
//        return pedidoDTO;
//    }
//
//    public Sala obtenerSalaPorId(int salaId) {
//        // Conectar al servidor de MongoDB (asegúrate de reemplazar la URL con la correcta)
//        MongoClient mongoClient = MongoClients.create("mongodb://localhost:27017");
//
//        try {
//            // Seleccionar la base de datos
//            MongoDatabase database = mongoClient.getDatabase("RestauranteBD");
//
//            // Seleccionar la colección de salas
//            MongoCollection<Document> collection = database.getCollection("salas");
//
//            // Construir el filtro para buscar la sala por su ID
//            Document filtro = new Document("_id", salaId);
//
//            // Ejecutar la consulta
//            Document salaDoc = collection.find(filtro).first();
//
//            if (salaDoc != null) {
//                // Si se encontró el documento de la sala, construir y devolver un objeto Sala
//                Sala sala = new Sala();
//                sala.setId(salaDoc.getInteger("_id"));
//                sala.setNombre(salaDoc.getString("nombre"));
//                sala.setMesas(salaDoc.getInteger("mesas"));
//                // Asignar otros campos de la sala según la estructura de tu documento
//                // sala.setNombre(salaDoc.getString("nombre"));
//                // sala.setCapacidad(salaDoc.getInteger("capacidad"));
//                return sala;
//            } else {
//                // Si no se encontró el documento de la sala, puedes manejarlo según tus necesidades.
//                // Aquí simplemente retornamos null.
//                return null;
//            }
//        } finally {
//            // Cerrar la conexión al cliente de MongoDB para liberar recursos
//            mongoClient.close();
//        }
//    }
//
    private void ListarPedidos() throws PersistenciaException {
        try {
            TablesDTO color = new TablesDTO();
            List<Pedido> listaPedidos = pedidoBO.listarPedidoss();

            modelo = (DefaultTableModel) TablePedidos.getModel();
            modelo.setRowCount(0); // Limpiar la tabla antes de agregar nuevos datos
            Object[] ob = new Object[7];
            for (Pedido pedidoDTO : listaPedidos) {
                ob[0] = pedidoDTO.getNombreSala();
                ob[1] = pedidoDTO.getNombreSala();
                ob[2] = pedidoDTO.getUsuario();
                ob[3] = pedidoDTO.getNumMesa();
                ob[4] = pedidoDTO.getFecha();
                ob[5] = pedidoDTO.getTotal();
                ob[6] = pedidoDTO.getEstado();
                modelo.addRow(ob);
            }

            colorHeader(TablePedidos);
            TablePedidos.setDefaultRenderer(Object.class, color);
        } catch (PersistenciaException e) {
            // Manejar errores de persistencia
            JOptionPane.showMessageDialog(this, "Error al listar los pedidos. Por favor, inténtelo de nuevo más tarde.", "Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(Sistema.class.getName()).log(Level.SEVERE, "Ocurrió un error al listar los pedidos", e);
        }
    }
//

    public void ListarConfig() throws PersistenciaException {
        try {
            // Obtener los datos de configuración de la empresa utilizando el controlador ConfigDAO
            Config config = configBO.obtenerDatosEmpresa();

            // Asignar los valores de Config a los componentes de la GUI
            if (config != null) {
                txtRucConfig.setText(config.getRuc());
                txtNombreConfig.setText(config.getNombre());
                txtTelefonoConfig.setText(config.getTelefono());
                txtDireccionConfig.setText(config.getDireccion());
                txtMensaje.setText(config.getMensaje());
            } else {
                // Manejar el caso en que no se encuentren datos de configuración de la empresa
                JOptionPane.showMessageDialog(null, "No se encontraron datos de configuración de la empresa.");
            }
        } catch (PersistenciaException e) {
            // Manejar la excepción de persistencia mostrando un mensaje de error
            JOptionPane.showMessageDialog(null, "Error al obtener los datos de la empresa: " + e.getMessage());
        }
    }

    private void ListarUsuarios() throws PersistenciaException {
        // Obtener la lista de usuarios del controlador
        List<UsuarioDTO> usuarios = usuarioBO.listarUsuarios();

        // Limpiar el modelo de la tabla antes de agregar nuevas filas
        modelo = (DefaultTableModel) TableUsuarios.getModel();
        modelo.setRowCount(0);

        // Agregar las filas al modelo de la tabla sin el ID
        for (UsuarioDTO usuario : usuarios) {
            Object[] fila = {usuario.getNombre(), usuario.getUsuario(), usuario.getRol()};
            modelo.addRow(fila);
        }

        // Aplicar estilo al encabezado de la tabla
        colorHeader(TableUsuarios);
    }

    /**
     * @param args the command line arguments
     */
    // Resto de tu clase Sistema...

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel LabelVendedor;
    private javax.swing.JPanel PanelMesas;
    private javax.swing.JPanel PanelSalas;
    private javax.swing.JTable TablePedidos;
    private javax.swing.JTable TablePlatos;
    public javax.swing.JTable TableUsuarios;
    private javax.swing.JButton btnActualizarConfig;
    private javax.swing.JButton btnAddPlato;
    private javax.swing.JButton btnAgregarComentario;
    private javax.swing.JButton btnConfig;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEditarSala;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnEliminarSala;
    private javax.swing.JButton btnEliminarTempPlato;
    private javax.swing.JButton btnFinalizar;
    private javax.swing.JButton btnGenerarPedido;
    private javax.swing.JButton btnGuardarPlatos;
    private javax.swing.JButton btnGuardarSala;
    private javax.swing.JButton btnPdfPedido;
    private javax.swing.JButton btnPedidos;
    private javax.swing.JButton btnPlatos;
    private javax.swing.JButton btnRegistrarUsuario;
    private javax.swing.JButton btnSala;
    private javax.swing.JButton btnUsuarios;
    private javax.swing.JComboBox<String> cbxRol;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tableFinalizar;
    private javax.swing.JTable tableMenu;
    private javax.swing.JTable tableSala;
    private javax.swing.JTable tblTemPlatos;
    private javax.swing.JLabel totalFinalizar;
    private javax.swing.JLabel totalMenu;
    private javax.swing.JTextField txtBuscarPlato;
    private javax.swing.JTextPane txtComentario;
    private javax.swing.JTextField txtDireccionConfig;
    private javax.swing.JTextField txtIdConfig;
    private javax.swing.JTextField txtIdHistorialPedido;
    private javax.swing.JTextField txtIdPedido;
    private javax.swing.JTextField txtIdSala1;
    private javax.swing.JTextField txtMensaje;
    private javax.swing.JTextField txtMesas;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtNombreConfig;
    private javax.swing.JTextField txtNombrePlato;
    private javax.swing.JTextField txtNombrePlatoOriginal;
    private javax.swing.JTextField txtNombreSala;
    private javax.swing.JTextField txtNombreSalaOriginal;
    private javax.swing.JTextField txtNumMesaFinalizar;
    private javax.swing.JPasswordField txtPass;
    private javax.swing.JTextField txtPrecioPlato;
    private javax.swing.JTextField txtRucConfig;
    private javax.swing.JTextField txtSalaFinalizar;
    private javax.swing.JTextField txtTelefonoConfig;
    private javax.swing.JTextField txtTempIdSala;
    private javax.swing.JTextField txtTempNumMesa;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables
}
